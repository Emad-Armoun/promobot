openapi: 3.0.3
info:
  title: Slackbot
  description: |-
    This bot is a slackbot which meets the team needs.

    Here you can find a collection of APIs for the Slackbot and WebPanel.

    Some useful links:
    - [APIs Github Repo](https://github.com/emitex1/team-management-slack-bot)
    - [Web Panel Github Repo](https://github.com/emitex1/team-management-web-panel)
    - [Web Panel Demo](http://34.41.198.14:8080)
    - [Web Panel APIs](http://34.41.198.14:3001/apis)
  contact:
    name: Emad Armoun
    url: https://github.com/emitex1
    email: emad.armoun@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.00
# externalDocs:
# description: Find out more about Swagger
# url: http://swagger.io
servers:
  - url: http://localhost:3001/api/webpanel/
  - url: http://34.41.198.14:3001/api/webpanel/
tags:
  - name: Candidate
    description: Everything about the candidates
    # externalDocs:
    #   description: Find out more
    #   url: http://swagger.io
  - name: Supervisor
    description: Read Supervisor related information

paths:
  /candidates:
    get:
      tags:
        - Candidate
      summary: Finds Candidates by name and activity status
      description: A search term and a activity status can be provided with comma separated strings
      operationId: getCandidates
      parameters:
        - name: isActive
          in: query
          description: Activity value that need to be considered for filter
          required: false
          explode: true
          schema:
            type: boolean
            default:
            enum:
              - true
              - false
        - name: search
          in: query
          description: A search term that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: successful read
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Data read successfully
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Candidate"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "500":
          description: Invalid status value
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets

    post:
      tags:
        - Candidate
      summary: Add a new candidate to the list
      description: Add a new candidate to the list
      operationId: addCandidate
      requestBody:
        description: Create a new candidate in the list
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/CandidateBody"
          application/xml:
            schema:
              $ref: "#/components/requestBodies/CandidateBody"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/requestBodies/CandidateBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Candidate"
            application/xml:
              schema:
                $ref: "#/components/schemas/Candidate"
        "400":
          description: Invalid input
        "422":
          description: Validation exception

  /candidate/{candidate_id}:
    get:
      tags:
        - Candidate
      summary: Find candidate by ID
      description: Returns a single candidate
      operationId: getCandidateById
      parameters:
        - name: candidate_id
          in: path
          description: ID of candidate to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Data read successfully
                  data:
                    $ref: "#/components/schemas/Candidate"
        "400":
          description: Invalid ID supplied
        "404":
          description: Candidate not found
      # security:
      #   - api_key: []
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets

    put:
      tags:
        - Candidate
      summary: Update an existing candidate
      description: Update an existing candidate by Id
      operationId: updateCandidate
      parameters:
        - name: candidate_id
          in: path
          description: ID of candidate to edit
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent candidate
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/CandidateBody"
          application/xml:
            schema:
              $ref: "#/components/requestBodies/CandidateBody"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/requestBodies/CandidateBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Candidate"
            application/xml:
              schema:
                $ref: "#/components/schemas/Candidate"
        "400":
          description: Invalid ID supplied
        "404":
          description: Candidate not found
        "422":
          description: Validation exception

  /candidate/{candidate_id}/deactivate:
    put:
      tags:
        - Candidate
      summary: Deactivate an existing candidate
      description: Deactivate an existing candidate
      operationId: deactivateCandidate
      parameters:
        - name: candidate_id
          in: path
          description: ID of candidate to deactivate
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Candidate"
            application/xml:
              schema:
                $ref: "#/components/schemas/Candidate"
        "400":
          description: Invalid ID supplied
        "404":
          description: Candidate not found
        "422":
          description: Validation exception

  /roles/{role_name}:
    get:
      tags:
        - Supervisor
      summary: Get all the supervisors
      description: Get all the supervisors
      operationId: getSupervisors
      parameters:
        - name: role_name
          in: path
          description: Name of the role
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Data read successfully
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Supervisor"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
            application/xml:
              schema:
                $ref: "#/components/schemas/Supervisor"
        "400":
          description: Invalid ID supplied
        "404":
          description: Candidate not found

  /roles/{role_name}/{candidate_id}:
    get:
      tags:
        - Supervisor
      summary: Find supervisor according to the candidate ID
      description: Returns the list of supervisors related to the candidate
      operationId: getSupervisorsByCandidateId
      parameters:
        - name: role_name
          in: path
          description: Name of the role
          required: true
          schema:
            type: string
        - name: candidate_id
          in: path
          description: ID of the candidate
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Data read successfully
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/SupervisorA"
                  pagination:
                    $ref: "#/components/schemas/Pagination"

components:
  schemas:
    Pagination:
      type: object
      properties:
        count:
          type: number
          example: 10
        page:
          type: number
          example: 1
        rowsPerPage:
          type: number

    Candidate:
      allOf:
        - $ref: "#/components/requestBodies/CandidateBody"
        - type: object
          properties:
            id:
              type: string
              example: 20d925f4-c640-4ebb-aa91-5196a743cb49
            isActive:
              type: boolean
              example: true
            creationDate:
              type: number
              description: A timestamp indicates the date of create
              example: 1705842561342
            editionDate:
              type: number
              description: A timestamp indicates the last date of edit
              example: 1705842561342

    SupervisorA:
      type: object
      properties:
        id:
          type: string
          example: 20d925f4-c640-4ebb-aa91-5196a743cb49
        creationDate:
          type: number
          description: A timestamp indicates the date of create
          example: 1705842561342
        candidate:
          $ref: "#/components/schemas/Candidate"
        role:
          $ref: "#/components/schemas/RoleA"

    RoleA:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: enum
          description: The role can be either RoleA or RoleB
          enum:
            - RoleA
            - RoleB
          example: RoleA

  requestBodies:
    CandidateBody:
      type: object
      properties:
        name:
          type: string
          example: Emad
        title:
          type: string
          example: Mr.
        lastName:
          type: string
          example: Armoun
        userName:
          type: string
          example: emitex
      xml:
        name: user
